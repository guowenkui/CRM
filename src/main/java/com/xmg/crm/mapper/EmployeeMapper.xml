<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xmg.crm.mapper.EmployeeMapper">
	<resultMap id="BaseResultMap" type="Employee">
		<id column="id" property="id" jdbcType="BIGINT" />
		<result column="username" property="username" jdbcType="VARCHAR" />
		<result column="realName" property="realname" jdbcType="VARCHAR" />
		<result column="password" property="password" jdbcType="VARCHAR" />
		<result column="tel" property="tel" jdbcType="VARCHAR" />
		<result column="email" property="email" jdbcType="VARCHAR" />
		<result column="inputTime" property="inputtime" jdbcType="TIMESTAMP" />
		<result column="state" property="state" jdbcType="BIT" />
		<result column="admin" property="admin" jdbcType="BIT" />
		<association property="dept" javaType="Department"
			columnPrefix="dept_">
			<id column="id" property="id" />
			<result column="name" property="name" />
		</association>
	</resultMap>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		delete from
		employee
		where id = #{id,jdbcType=BIGINT}
	</delete>
	<insert id="insert" parameterType="com.xmg.crm.domain.Employee"
		useGeneratedKeys="true" keyProperty="id">
		insert into employee (username,
		realName, password,
		tel, email, dept_id,
		inputTime, state, admin)
		values
		(#{username,jdbcType=VARCHAR}, #{realname,jdbcType=VARCHAR},
		#{password,jdbcType=VARCHAR},
		#{tel,jdbcType=VARCHAR},
		#{email,jdbcType=VARCHAR}, #{dept.id,jdbcType=VARCHAR},
		#{inputtime,jdbcType=TIMESTAMP}, #{state,jdbcType=BIT},
		#{admin,jdbcType=BIT})
	</insert>
	<update id="updateByPrimaryKey" parameterType="com.xmg.crm.domain.Employee">
		update employee
		set username = #{username,jdbcType=VARCHAR},
		realName = #{realname,jdbcType=VARCHAR},
		tel = #{tel,jdbcType=VARCHAR},
		email = #{email,jdbcType=VARCHAR},
		dept_id = #{dept.id,jdbcType=VARCHAR}
		where id = #{id,jdbcType=BIGINT}
	</update>

	<sql id="fieldSql">
		e.id, e.username, e.realName, e.password, e.tel, e.email,
		e.inputTime,
		e.state, e.admin,
		d.id as dept_id,d.name as dept_name
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Long">
		select
		<include refid="fieldSql" />
		from employee e left join department d on d.id = e.dept_id
		where e.id
		=
		#{id,jdbcType=BIGINT}
	</select>
	<select id="selectAll" resultMap="BaseResultMap">
		select
		<include refid="fieldSql" />
		from employee e left join department d on d.id = e.dept_id
	</select>


	<sql id="conditionSql">
	    <where>
	        <if test="state!=null">
	          AND e.state = #{state}
	        </if>
	        <if test="keyword!=null">
	           AND (e.username like concat('%',#{keyword},'%') OR e.realname like concat('%',#{keyword},'%') )
	        </if>
	        <if test="beginDate!=null">
	        	AND e.inputtime &gt;=#{beginDate}
	        </if>
	        <if test="endDate!=null">
	        	AND e.inputtime &lt;=#{endDate}
	        </if>
	    </where>
	</sql>
	<select id="queryByConditionCount" resultType="long">
		select Count(*) from employee e
		<include refid="conditionSql" />
	</select>
	<select id="queryByCondition" resultMap="BaseResultMap">
		select
		<include refid="fieldSql" />
		from employee e left join department d on d.id = e.dept_id
		<include refid="conditionSql" />
		<if test="page!=null">
			limit #{start},#{rows}
		</if>
	</select>
	
	<select id="queryByLogin" resultMap="BaseResultMap">
	     select
		<include refid="fieldSql" />
		from employee e left join department d on d.id = e.dept_id
		where e.username = #{username} and e.password = #{password}
	</select>
	
	<update id="updateState">
	   update employee set state = 0 where id = #{id}
	</update>
	
	<insert id="handlerRelation">
	    insert into emp_role(r_id,e_id) values(#{rid},#{eid});
	</insert>
    <delete id="deleteRelationByEid">
        delete from emp_role where e_id = #{eid}
    </delete>
</mapper>